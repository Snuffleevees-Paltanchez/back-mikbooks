// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Author {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(255) // asume that author name is unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  books Book[]

  @@map("authors")
}


model Book {
  id              Int       @id @default(autoincrement())
  title           String    @db.VarChar(255)
  authorId        Int
  isbn            String    @unique @db.VarChar(13)
  publicationDate DateTime?
  description     String?   @db.Text
  imgUrl          String?   @db.VarChar(255)
  ratingAvg       Float?    @default(0)
  ratingCount     Int?      @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  isDeleted       Boolean   @default(false)

  author     Author     @relation(fields: [authorId], references: [id])
  categories Category[]

  prices    Price[]
  favorites Favorite[]

  @@map("books")
}

model Price {
  id         Int      @id @default(autoincrement())
  bookId     Int
  platformId Int
  price      Float
  date       DateTime
  productUrl String   @db.VarChar(255)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isDeleted  Boolean  @default(false)

  platform Platform @relation(fields: [platformId], references: [id])

  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([bookId, platformId])
  @@map("prices")
}

model Platform {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(255)
  url       String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  prices Price[]

  @@map("platforms")
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    Int
  bookId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@map("favorites")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  books Book[]

  @@map("categories")
}
